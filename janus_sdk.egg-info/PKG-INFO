Metadata-Version: 2.4
Name: janus-sdk
Version: 1.0.0
Summary: Discord.py風のJanus API Python SDK
Home-page: https://github.com/your-org/janus-sdk
Author: Janus Development Team
Author-email: dev@janus.example.com
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Communications :: Chat
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: requests>=2.25.0
Requires-Dist: typing-extensions>=4.0.0
Provides-Extra: websocket
Requires-Dist: websockets>=10.0; extra == "websocket"
Provides-Extra: database
Requires-Dist: aiosqlite>=0.17.0; extra == "database"
Provides-Extra: postgresql
Requires-Dist: psycopg2-binary>=2.9.0; extra == "postgresql"
Provides-Extra: mysql
Requires-Dist: mysql-connector-python>=8.0.0; extra == "mysql"
Provides-Extra: dev
Requires-Dist: pytest>=6.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.18.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: flake8>=4.0.0; extra == "dev"
Requires-Dist: mypy>=0.950; extra == "dev"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Janus SDK

[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)
[![MIT License](https://img.shields.io/badge/license-MIT-green.svg)](LICENSE)

Discord風のチャット/コミュニティプラットフォーム「Janus」のPython SDK です。

## ✨ 特徴

- 🚀 **簡単セットアップ** - サーバーIPとトークンだけで即開始
- 🔒 **安全なアクセス制御** - 自分のサーバーのみアクセス可能
- 💬 **チャット機能** - メッセージ送信・受信・リアルタイム監視
- 🎯 **カスタムチャンネル** - 独自チャンネルの作成・管理
- 👥 **ユーザー管理** - サーバーメンバーの取得・管理
- 📊 **リアルタイムイベント** - Webhookサポート
- 🛠️ **拡張可能** - プラグインアーキテクチャ

## 🔧 インストール

```bash
pip install janus-sdk
```

## 🚀 クイックスタート

### 1. サーバートークンの取得

Janusアプリで：
1. サーバー設定を開く
2. 「サーバートークン（SDK用）」をコピー

### 2. 基本的な使用例

```python
import janus

# クライアント初期化
client = janus.Client(
    host="https://your-janus-server.com",
    token="janus_your_server_token_here"
)

# チャンネル一覧取得
channels = client.get_channels()
print(f"利用可能なチャンネル: {len(channels)}")

# メッセージ送信
channel = channels[0]  # 最初のチャンネル
message = client.send_message(channel.id, "Hello from Python!")
print(f"送信完了: {message.id}")

# メッセージ履歴取得
messages = client.get_messages(channel.id, limit=10)
for msg in messages:
    print(f"{msg.author}: {msg.content}")
```

### 3. カスタムチャンネル作成

```python
# 新しいチャンネル作成
custom_channel = client.create_channel(
    name="ai-実験室", 
    description="AI実験用チャンネル",
    type="text"  # or "voice", "forum"
)

# 作成したチャンネルにメッセージ送信
client.send_message(
    custom_channel.id, 
    "🤖 AI実験室へようこそ！"
)
```

### 4. リアルタイムイベント監視

```python
@client.event
async def on_message(message):
    if message.content.startswith("!ai"):
        # AI機能の処理
        response = await process_ai_request(message.content)
        await client.send_message(message.channel_id, response)

@client.event
async def on_member_join(member):
    # 新規メンバー歓迎
    welcome_channel = client.get_channel("general")
    await client.send_message(
        welcome_channel.id,
        f"🎉 {member.name}さん、ようこそ！"
    )

# イベントループ開始
client.run()
```

## 📚 主要機能

### チャンネル管理

```python
# チャンネル作成
channel = client.create_channel(
    name="開発議論",
    description="開発に関する議論",
    type="text"
)

# チャンネル一覧
channels = client.get_channels()

# チャンネル情報取得
channel_info = client.get_channel(channel_id)

# チャンネル削除
client.delete_channel(channel_id)
```

### メッセージ機能

```python
# メッセージ送信
message = client.send_message(
    channel_id=123,
    content="こんにちは！",
    embeds=[{
        "title": "お知らせ",
        "description": "重要な更新があります",
        "color": 0x00ff00
    }]
)

# 過去のメッセージ取得
messages = client.get_messages(
    channel_id=123,
    limit=50,
    before=message_id  # 特定メッセージより前
)

# メッセージ編集
client.edit_message(message_id, "編集されたメッセージ")

# メッセージ削除
client.delete_message(message_id)
```

### ユーザー・メンバー管理

```python
# サーバーメンバー一覧
members = client.get_members()

# 特定ユーザー情報
user = client.get_user(user_id)

# オンライン状態確認
online_members = client.get_online_members()
```

### ファイル・メディア

```python
# ファイル送信
file_message = client.send_file(
    channel_id=123,
    file_path="./report.pdf",
    message="レポートを共有します"
)

# 画像送信
image_message = client.send_image(
    channel_id=123,
    image_path="./screenshot.png",
    message="スクリーンショットです"
)
```

## 🔌 イベント・Webhook

### イベントハンドラー

```python
@client.event
async def on_ready():
    print(f"ログイン完了: {client.user.name}")

@client.event  
async def on_message(message):
    # 自分のメッセージは無視
    if message.author.id == client.user.id:
        return
        
    # コマンド処理
    if message.content.startswith("!ping"):
        await client.send_message(message.channel_id, "Pong!")

@client.event
async def on_channel_create(channel):
    print(f"新しいチャンネル: {channel.name}")

@client.event
async def on_member_join(member):
    print(f"新メンバー: {member.name}")
```

### Webhook

```python
# Webhook URL設定
client.set_webhook_url("https://your-app.com/webhook")

# または手動でWebhookを処理
from janus.webhook import WebhookServer

webhook_server = WebhookServer(port=8080)

@webhook_server.route("/janus-events")
async def handle_events(event_data):
    if event_data["type"] == "message":
        print(f"新しいメッセージ: {event_data['content']}")
    elif event_data["type"] == "member_join":
        print(f"新メンバー: {event_data['member']['name']}")

webhook_server.run()
```

## 🔐 セキュリティ・権限

```python
# 権限チェック
if client.has_permission(user_id, "SEND_MESSAGES", channel_id):
    client.send_message(channel_id, "権限チェックOK")

# 管理者権限が必要な操作
if client.is_admin(user_id):
    client.delete_channel(channel_id)
    
# 自分のサーバーかチェック（SDK内部で自動実行）
# 他人のサーバーにはアクセス不可
```

## 🧩 拡張・プラグイン

### カスタムコマンド

```python
from janus.ext import commands

bot = commands.Bot(command_prefix="!", host="...", token="...")

@bot.command(name="hello")
async def hello_command(ctx, name=None):
    if name:
        await ctx.send(f"こんにちは、{name}さん！")
    else:
        await ctx.send("こんにちは！")

@bot.command(name="weather")
async def weather_command(ctx, city="東京"):
    weather_data = await get_weather(city)  # 外部API
    await ctx.send(f"{city}の天気: {weather_data}")

bot.run()
```

### データベース連携

```python
import sqlite3
from janus.ext import database

# データベース初期化
db = database.Database("my_bot.db")

@client.event
async def on_message(message):
    # メッセージをDBに保存
    db.execute("""
        INSERT INTO messages (channel_id, user_id, content, timestamp)
        VALUES (?, ?, ?, ?)
    """, (message.channel_id, message.author.id, message.content, message.timestamp))
    
    # 統計情報
    if message.content == "!stats":
        count = db.fetchone("SELECT COUNT(*) FROM messages WHERE user_id = ?", (message.author.id,))
        await client.send_message(message.channel_id, f"あなたの総メッセージ数: {count[0]}")
```

## 🎯 実用例

### 1. ChatGPT連携ボット

```python
import openai
import janus

client = janus.Client(host="...", token="...")
openai.api_key = "your-openai-key"

@client.event
async def on_message(message):
    if message.content.startswith("!ai "):
        question = message.content[4:]  # "!ai " を除去
        
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": question}]
        )
        
        answer = response.choices[0].message.content
        await client.send_message(message.channel_id, f"🤖 {answer}")

client.run()
```

### 2. 定期通知システム

```python
import asyncio
from datetime import datetime

@client.task_loop(minutes=30)
async def hourly_reminder():
    now = datetime.now()
    if now.hour == 9:  # 朝9時
        channel = client.get_channel("general")
        await client.send_message(
            channel.id, 
            "🌅 おはようございます！今日も頑張りましょう！"
        )
    elif now.hour == 18:  # 夕方6時
        await client.send_message(
            channel.id,
            "🌆 お疲れ様でした！今日の振り返りをしませんか？"
        )

# タスク開始
hourly_reminder.start()
```

### 3. ファイル監視・自動アップロード

```python
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

class FileHandler(FileSystemEventHandler):
    def on_created(self, event):
        if event.is_directory:
            return
            
        file_path = event.src_path
        if file_path.endswith(('.png', '.jpg', '.pdf')):
            channel = client.get_channel("files")
            client.send_file(
                channel.id,
                file_path,
                f"📁 新しいファイル: {os.path.basename(file_path)}"
            )

# ファイル監視開始
observer = Observer()
observer.schedule(FileHandler(), "/path/to/watch", recursive=True)
observer.start()
```

## 🚨 エラーハンドリング

```python
from janus.exceptions import (
    JanusAPIError,
    PermissionError,
    RateLimitError,
    ServerNotFoundError
)

try:
    message = client.send_message(channel_id, "テストメッセージ")
except PermissionError:
    print("このチャンネルへの送信権限がありません")
except RateLimitError as e:
    print(f"レート制限に達しました。{e.retry_after}秒後に再試行してください")
except ServerNotFoundError:
    print("指定されたサーバーが見つかりません")
except JanusAPIError as e:
    print(f"API エラー: {e.status_code} - {e.message}")
```

## 📋 環境変数設定

```bash
# .env ファイル
JANUS_HOST=https://your-janus-server.com
JANUS_TOKEN=janus_your_server_token_here
JANUS_DEBUG=true
```

```python
import os
from dotenv import load_dotenv

load_dotenv()

client = janus.Client(
    host=os.getenv("JANUS_HOST"),
    token=os.getenv("JANUS_TOKEN"),
    debug=os.getenv("JANUS_DEBUG", "false").lower() == "true"
)
```

## 🔧 設定オプション

```python
client = janus.Client(
    host="https://your-janus-server.com",
    token="your_token",
    
    # オプション設定
    timeout=30,                    # リクエストタイムアウト（秒）
    retry_attempts=3,              # 再試行回数
    rate_limit_per_minute=60,      # 分あたりリクエスト制限
    auto_reconnect=True,           # 自動再接続
    debug=False,                   # デバッグモード
    user_agent="MyBot/1.0",        # ユーザーエージェント
    
    # Webhook設定
    webhook_url="https://myapp.com/webhook",
    webhook_secret="secret_key",
    
    # キャッシュ設定
    cache_messages=True,           # メッセージキャッシュ
    cache_members=True,            # メンバーキャッシュ
    cache_ttl=300,                 # キャッシュ有効期限（秒）
)
```

## 📖 API リファレンス

### Client

| メソッド | 説明 | 戻り値 |
|---------|------|--------|
| `get_channels()` | チャンネル一覧取得 | `List[Channel]` |
| `get_channel(id)` | チャンネル情報取得 | `Channel` |
| `create_channel(name, **kwargs)` | チャンネル作成 | `Channel` |
| `delete_channel(id)` | チャンネル削除 | `bool` |
| `send_message(channel_id, content, **kwargs)` | メッセージ送信 | `Message` |
| `get_messages(channel_id, **kwargs)` | メッセージ履歴取得 | `List[Message]` |
| `get_members()` | メンバー一覧取得 | `List[Member]` |
| `get_user(id)` | ユーザー情報取得 | `User` |

### Models

#### Channel
```python
class Channel:
    id: int
    name: str
    description: str
    type: str  # "text", "voice", "forum"
    created_at: datetime
    updated_at: datetime
```

#### Message
```python
class Message:
    id: int
    channel_id: int
    author: User
    content: str
    timestamp: datetime
    edited_at: Optional[datetime]
    attachments: List[Attachment]
```

#### User
```python
class User:
    id: str  # Auth0 ID
    name: str
    avatar_url: Optional[str]
    status: str  # "online", "offline", "away"
    roles: List[str]
```

## 🤝 コントリビューション

1. このリポジトリをフォーク
2. フィーチャーブランチを作成 (`git checkout -b feature/amazing-feature`)
3. 変更をコミット (`git commit -m 'Add amazing feature'`)
4. ブランチにプッシュ (`git push origin feature/amazing-feature`)
5. プルリクエストを作成

## 📄 ライセンス

MIT License - 詳細は [LICENSE](LICENSE) ファイルを参照

## 🆘 サポート

- 📧 Email: support@janus.com
- 💬 Discord: [Janus Community](https://discord.gg/janus)
- 📚 Documentation: [docs.janus.com](https://docs.janus.com)
- 🐛 Issues: [GitHub Issues](https://github.com/janus/janus-sdk/issues)

---

**Happy Coding with Janus! 🚀**
